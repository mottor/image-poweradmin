user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 1024;

    # optmized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # Accept as many connections as possible, after nginx gets notification about a new connection.
    # May flood worker_connections, if that option is set too low.
    # -- for testing environment
    multi_accept on;
}

http {
    # конструкция map ниже эквивалентно выражению
    # $schemeMod = ($http_x_forwarded_proto == 'https') ? 'https' : $scheme
    map $http_x_forwarded_proto $schemeMod {
        default $scheme;
        https https;
    }

    map $http_x_requested_with $is_ajax {
        default 0;
        XMLHttpRequest 1;
    }
    map $http_referer $frame_options {
        "~webvisor.com" "";
        default "SAMEORIGIN";
    }

    map $http_x_request_id $reqid {
        default   $http_x_request_id;
        ""        $request_id;
    }

    # extract the user IP address:
    map $http_x_forwarded_for $client_ip {
        ~^(\d+\.\d+\.\d+\.\d+) $1;
        default $remote_addr;
    }

    # copies data between one FD and other from within the kernel
    # faster then read() + write()
    sendfile    on;

    # send headers in one peace, its better then sending them one by one
    tcp_nopush  on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;


    #########################################

    # сколько будет ждать тело запроса от клиента. Если это время выйдет - сбросит соединение
    client_body_timeout     30;

    # how long to wait for the client to send a request header -- for testing environment
    client_header_timeout   15;

    # если клиент прекратит чтение ответа, Nginx сбросит соединение через это время
    # Sets a timeout for transmitting a response to the client.
    # The timeout is set only between two successive write operations, not for the transmission of the whole response.
    # If the client does not receive anything within this time, the connection is closed.
    send_timeout            10;

    #########################################
    # Keepalive
    # позволяют избежать необходимости повторного создания соединения между клиентом и сервером.

    # сколько сервер будет ждать перед закрытием keepalive соединения
    keepalive_timeout  60s;

    # максимальное количество keepalive запросов от одного клиента
    keepalive_requests 100;

    #########################################

    # if the request body size is more than the buffer size, then the entire (or partial)
    # request body is written into a temporary file
    client_body_buffer_size     256K;

    # headerbuffer size for the request header from client -- for testing environment
    client_header_buffer_size   4K;

    # maximum number and size of buffers for large headers to read from client request
    large_client_header_buffers 4 16k;

    # сервер не будет принимать запросы размером более чем эта цифра
    client_max_body_size        8m;

    client_body_temp_path       /tmp 1 2;
    types_hash_max_size         2048;
    server_tokens               off;

    # the directive value should be increased to the next power of two
    server_names_hash_bucket_size 128;
    server_names_hash_max_size 512;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    index index.htm index.html;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format custom_json escape=json '{'
    '"timestamp":"$time_iso8601",' # local time in the ISO 8601 standard format
    '"status":$status,' # response status code
    '"request_id":"$reqid",' # the unique request id
    '"request_method":"$request_method",'
    '"request_host":"$host",' # the request Host: header
    '"request_uri":"$request_uri",' # full path and arguments if the request
    '"request_time":"$request_time",' # request processing time in seconds with msec resolution
    '"request_length":"$request_length",' # request length (including headers and body)
    '"url":"$schemeMod://$host$request_uri",'
    '"remote_addr":"$client_ip",'
    '"remote_user":"$remote_user",'
    '"http_x_real_ip":"$http_x_real_ip",'
    '"http_x_forwarded_for":"$http_x_forwarded_for",'
    '"http_x_forwarded_proto":"$http_x_forwarded_proto",'
    '"http_referrer":"$http_referer",' # HTTP referer
    '"http_user_agent":"$http_user_agent",'
    '"body_bytes_sent":"$body_bytes_sent",' # the number of body bytes exclude headers sent to a client
    '"bytes_sent":"$bytes_sent",' # the number of bytes sent to a client
    '"server_name":"$server_name",' # the name of the vhost serving the request
    '"server_protocol":"$server_protocol",' # request protocol, like HTTP/1.1 or HTTP/2.0
    '"upstream_addr":"$upstream_addr",' # upstream backend server for proxied requests
    '"upstream_connect_time":"$upstream_connect_time",' # upstream handshake time incl. TLS
    '"upstream_header_time":"$upstream_header_time",' # time spent receiving upstream headers
    '"upstream_response_time":"$upstream_response_time",' # time spend receiving upstream body
    '"upstream_response_length":"$upstream_response_length",' # upstream response length
    '"upstream_cache_status":"$upstream_cache_status",' # cache HIT/MISS where applicable
    '"scheme":"$scheme"' # http or https
    '}';

    access_log /dev/stdout custom_json buffer=1k flush=1s;
    error_log stderr warn;

    #########################################
    # Gzip
    # reduce the data that needs to be sent over network -- for testing environment
    gzip                on;
    gzip_disable        "msie6";
    gzip_vary           on;
    gzip_min_length     10240;
    gzip_proxied        any;
    gzip_comp_level     8;
    gzip_buffers        128 32k;
    gzip_http_version   1.1;
    #gzip_proxied        expired no-cache no-store private auth;
    gzip_types          text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript;

    #########################################
    # Proxy cache
    server_name_in_redirect off;
    port_in_redirect        off;
    proxy_cache_revalidate  on;
    proxy_cache_path        /tmp/nginx_proxy_cache levels=1:2 keys_zone=my_proxy_cache:10m max_size=512m inactive=60m;
    proxy_temp_path         /tmp/nginx_proxy_temp_path;
    proxy_cache_key         $scheme$host$request_uri;
    proxy_ignore_headers    Set-Cookie;
    proxy_http_version	    1.1;
    proxy_buffers           8 16k;
    proxy_buffer_size       32k;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    add_header X-Proxy-Cache $upstream_cache_status;

    include /etc/nginx/conf.d/*.conf;
}
